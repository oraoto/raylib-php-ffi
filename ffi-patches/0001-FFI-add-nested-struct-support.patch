From a72506427efe00b1e56e7d8c651884da88c2916e Mon Sep 17 00:00:00 2001
From: Oraoto <oraoto@outlook.com>
Date: Fri, 8 Feb 2019 15:36:34 +0800
Subject: [PATCH] FFI: add nested struct support

---
 ext/ffi/ffi.c | 46 +++++++++++++++++++++++++++++-----------------
 1 file changed, 29 insertions(+), 17 deletions(-)

diff --git a/ext/ffi/ffi.c b/ext/ffi/ffi.c
index 1a8f866520..bcb02d75b8 100644
--- a/ext/ffi/ffi.c
+++ b/ext/ffi/ffi.c
@@ -273,17 +273,9 @@ static int zend_ffi_is_compatible_type(zend_ffi_type *dst_type, zend_ffi_type *s
 }
 /* }}} */
 
-static ffi_type *zend_ffi_make_fake_struct_type(zend_ffi_type *type) /* {{{ */
+static int zend_ffi_make_nested_struct_type(zend_ffi_type *type, ffi_type *t, int i) /* {{{ */
 {
-	ffi_type *t = emalloc(sizeof(ffi_type) + sizeof(ffi_type*) * (zend_hash_num_elements(&type->record.fields) + 1));
-	int i;
 	zend_ffi_field *field;
-
-	t->size = type->size;
-	t->alignment = type->align;
-	t->type = FFI_TYPE_STRUCT;
-	t->elements = (ffi_type**)(t + 1);
-	i = 0;
 	ZEND_HASH_FOREACH_PTR(&type->record.fields, field) {
 		switch (ZEND_FFI_TYPE(field->type)->kind) {
 			case ZEND_FFI_TYPE_FLOAT:
@@ -318,13 +310,34 @@ static ffi_type *zend_ffi_make_fake_struct_type(zend_ffi_type *type) /* {{{ */
 			case ZEND_FFI_TYPE_POINTER:
 				t->elements[i] = &ffi_type_pointer;
 				break;
+			case ZEND_FFI_TYPE_STRUCT:
+				i = zend_ffi_make_nested_struct_type(field->type, t, i) - 1;
+				break;
 			default:
-				efree(t);
-				zend_throw_error(zend_ffi_exception_ce, "Passing incompatible struct/union");
-				return NULL;
+			        return 0;
 			}
 		i++;
 	} ZEND_HASH_FOREACH_END();
+	return i;
+}
+/* }}} */
+
+static ffi_type *zend_ffi_make_fake_struct_type(zend_ffi_type *type) /* {{{ */
+{
+	ffi_type *t = emalloc(sizeof(ffi_type) + sizeof(ffi_type*) * (zend_hash_num_elements(&type->record.fields) + 1));
+	int i;
+
+	t->size = type->size;
+	t->alignment = type->align;
+	t->type = FFI_TYPE_STRUCT;
+	t->elements = (ffi_type**)(t + 1);
+	i = 0;
+	i = zend_ffi_make_nested_struct_type(type, t, i);
+	if (i == 0) {
+		efree(t);
+		zend_throw_error(zend_ffi_exception_ce, "Passing incompatible struct/union");
+		return NULL;
+	}
 	t->elements[i] = NULL;
 	return t;
 }
@@ -2422,14 +2435,13 @@ static ZEND_FUNCTION(ffi_trampoline) /* {{{ */
 	}
 
 	ffi_call(&cif, addr, &ret, arg_values);
-
 	for (n = 0; n < arg_count; n++) {
-		if (arg_types[n]->type == FFI_TYPE_STRUCT) {
-			efree(arg_types[n]);
+		if (cif.arg_types[n]->type == FFI_TYPE_STRUCT) {
+			efree(cif.arg_types[n]);
 		}
 	}
-	if (ret_type->type == FFI_TYPE_STRUCT) {
-		efree(ret_type);
+	if (cif.rtype->type == FFI_TYPE_STRUCT) {
+		efree(cif.rtype);
 	}
 
 	if (EX_NUM_ARGS()) {
-- 
2.20.1

